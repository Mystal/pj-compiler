(*$t+*)
(*$l+*)
(* No errors should be found in this file either *)
(*********************************************************************)
(*                                                                   *)
(*   this program calculates e to the 1.0, 2.0, 3.0, 4.0, and 5.0    *)
(*   powers using recursive procedures to calculate factorials and   *)
(*   powers of x1.  it also uses mixed arithmetic, real and alfa     *)
(*   i/o, simple if-then-else, and one-level of loop nesting.        *)
(*                                                                   *)
(*   this program uses a taylor series to calculate e to the x       *)
(*   and is, incidently, very inaccurate.                            *)
(*                                                                   *)
(*********************************************************************)
 program expon(input,output,outpt);
   const
      numterms = 10;    (* number of terms in the series *)
      x        = 1.0;   (* initial value of x1 *)
      topx     = 6.0;   (* final value of x1 *)
   var
      outpt    : text ;
      fact     : integer ;
      i        : integer ;
      power    : real ;
      etothex  : real ;
      x1       : real ;
    procedure factcalc( x : integer );
      var
         i:integer;
      begin
         if x > 0 then begin
            factcalc(x-1);
            fact := fact * x
            end
         else
            fact := 1
      end; (* factcalc *)
    procedure powercalc( x : real;  i : integer );
      begin
         if i > 0 then begin
            powercalc(x, i-1);
            power := power * x
            end
         else
            i := 1  (* dummy statement *)
      end; (* powercalc *)
 begin (* expon *)
   rewrite(outpt);
   x1 := x;
   while x1 < topx do begin  (* calculate e to the x1 *)
      etothex := 1.0;
      for i := 2 to numterms do begin
         fact := 1;
         power := 1.0;
         factcalc(i-1);
         powercalc(x1,i-1);
         etothex := etothex + power / fact
         end;
      write(outpt,' e to the ');
      write(outpt, x1);
      write(outpt,' equals   ');
      writeln(outpt, etothex);
      x1 := x1 + 1
      end
end.
